sponsor_confidentiality_statement:
  type: text
  value: ''
  add: False
  status: 'no map'
full_title:
  type: text
  add: False
  status: "ok"
  root:
    query: "MATCH (sv:StudyVersion {uuid: $uuid})-[]->(st:StudyTitle)-[]->(c:Code {code: 'C99905x1'})"
  read:
    query: "RETURN st.text as value"
  write:
    query: "SET st.text = $value RETURN st.text as value"
    data: 
    - 'uuid'
    - 'value'
  reference:
    query: "RETURN st as value"
    klass: 'StudyTitle'
    attribute: 'text'
study_acronym:
  type: text
  add: False
  status: "ok"
  root:
    query: "MATCH (sv:StudyVersion {uuid: $uuid})-[]->(st:StudyTitle)-[]->(c:Code {code: 'C94108'})"
  read:
    query: "RETURN st.text as value"
  write:
    query: "SET st.text = $value RETURN st.text as value"
    data: 
    - 'uuid'
    - 'value'
  reference:
    query: "RETURN st as value"
    klass: 'StudyTitle'
    attribute: 'text'
version_number:
  type: text
  add: False
  status: "ok"
  root:
    query: "MATCH (sv:StudyVersion {uuid: $uuid})"
  read:
    query: "RETURN sv.versionIdentifier as value"
  write:
    query: "RETURN sv.versionIdentifier as value"
    data: 
    - 'uuid'
    - 'value'
  reference:
    query: "RETURN sv as value"
    klass: 'StudyVersion'
    attribute: 'versionIdentifier'
protocol_identifier:
  type: text
  add: False
  status: "ok"
  root:
    query: "MATCH (sv:StudyVersion {uuid: $uuid})-[]->(si:StudyIdentifier)-[]->(o:Organization)-[]->(c:Code {code: 'C70793'})"
  read:
    query: "RETURN si.studyIdentifier as value"
  write:
    query: "SET si.studyIdentifier = $value RETURN si.studyIdentifier as value"
    data: 
    - 'uuid'
    - 'value'
  reference:
    query: "RETURN si as value"
    klass: 'StudyIdentifier'
    attribute: 'studyIdentifier'

# trial_phase:
#   type: code_list
#   value: ''
#   add: False
trial_phase:
  status: 'no map'
#   phase = self._study_version.studyPhase.standardCode
#   results = [{'instance: phase, 'klass: 'Code', 'attribute: 'decode'}]
#   return self._set_of_references(results)

study_short_title:
  status: 'no map'
#   results = [{'instance: self.protocol_document_version, 'klass: 'StudyProtocolDocumentVersion', 'attribute: 'briefTitle'}]
#   return self._set_of_references(results)

study_full_title:
  status: 'no map'
#   #results = [{'instance: self.protocol_document_version, 'klass: 'StudyProtocolDocumentVersion', 'attribute: 'officialTitle'}]
#   result = Element( self._study_version, 'full_title').reference()
#   print(f"RESULT:result}")
#   refs = [result['result']] if 'result' in result else []
#   return self._set_of_references(refs)

study_version_identifier:
  status: 'no map'
#   results = [{'instance: self._study_version, 'klass: 'StudyVersion', 'attribute: 'versionIdentifier'}]
#   return self._set_of_references(results)

study_identifier:
  status: 'no map'
#   identifier = self._sponsor_identifier()
#   results = [{'instance: identifier, 'klass: 'StudyIdentifier', 'attribute: 'studyIdentifier'}]
#   return self._set_of_references(results)

study_regulatory_identifiers:
  status: 'no map'
#   identifiers = self._study_version.studyIdentifiers
#   for identifier in identifiers:
#     if identifier.studyIdentifierScope.type.code == 'C188863' or identifier.studyIdentifierScope.type.code == 'C93453:
#       item ='instance: identifier, 'klass: 'StudyIdentifier', 'attribute: 'studyIdentifier'}
#       results.append(item)
#   return self._set_of_references(results)

study_date:
  status: 'no map'
#   dates = self.protocol_document_version.dateValues
#   for date in dates:
#     if date.type.code == 'C99903x1:
#       results = [{'instance: date, 'klass: 'GovernanceDate', 'attribute: 'dateValue'}]
#       return self._set_of_references(results)
#   return None

approval_date:
  status: 'no map'
#   dates = self._study_version.dateValues
#   for date in dates:
#     if date.type.code == 'C132352:
#       results = [{'instance: date, 'klass: 'GovernanceDate', 'attribute: 'dateValue'}]
#       return self._set_of_references(results)
#   return None

organization_name_and_address:
  status: 'no map'
#   identifier = self._sponsor_identifier()
#   results = [
#    instance: identifier.studyIdentifierScope, 'klass: 'Organization', 'attribute: 'name'}
#    instance: identifier.studyIdentifierScope.legalAddress, 'klass: 'Address', 'attribute: 'text'}
#   ]
#   return self._set_of_references(results)

amendment_identifier:
  status: 'no map'
#   type: text
#   value: ''
#   add: False

amendment:
  status: 'no map'
#   amendments = self._study_version.amendments
#   results = [{'instance: amendments[-1], 'klass: 'StudyAmendment', 'attribute: 'number'}]
#   return self._set_of_references(results)

amendment_scopes:
  status: 'no map'
#   results = []
#   amendment = self._study_version.amendments[-1]
#   for item in amendment.enrollments:
#     if item.type.code == "C68846":
#       results = [{'instance: item.type, 'klass: 'Code', 'attribute: 'decode'}]
#       return self._set_of_references(results)
#     else:
#       entry ='instance: item.code.standardCode, 'klass: 'Code', 'attribute: 'decode'}
#       results.append(entry)
#   return self._set_of_references(results)

compound_code:
  status: "no map"
  type: text
  value: ''
  add: False


original_protocol:
  status: 'no map'
  type: text
  value: ''
  add: False
version_date:
  status: 'no map'
  type: text
  value: ''
  add: False
nonproprietary_name:
  status: 'no map'
  type: text
  value: ''
  add: False
proprietary_name:
  status: 'no map'
  type: text
  value: ''
  add: False
trial_short_title:
  status: 'no map'
  type: text
  value: ''
  add: False
sponsor_name:
  status: 'no map'
  type: text
  value: ''
  add: False
sponsor_legal_address:
  status: 'no map'
  type: text
  value: ''
  add: False
eu_ct_number:
  status: 'no map'
  type: text
  value: ''
  add: False
ide_number:
  status: 'no map'
  type: text
  value: ''
  add: False
fda_ind_number:
  status: 'no map'
  type: text
  value: ''
  add: False
jrct_number:
  status: 'no map'
  type: identifier
  value: ''
  add: False
nct_number:
  status: 'no map'
  type: identifier
  value: ''
  add: False
nmpa_ind_number:
  status: 'no map'
  type: identifier
  value: ''
  add: False
who_utn_number:
  status: 'no map'
  type: identifier
  value: ''
  add: False
other_regulatory_agency_identifier_number:
  status: 'no map'
  type: identifier
  value: ''
  add: True
approval_date_or_state_location_where_information_can_be_found:
  status: 'no map'
  type: text
  value: ''
  add: False
sponsor_signature_block:
  status: 'no map'
  type: text
  value: ''
  add: False
describe_method:
  status: 'no map'
  type: text
  value: ''
  add: False
expedited_safety_information_contact_method:
  status: 'no map'
  type: text
  value: ''
  add: False
approximate_number_or_percentage_enrolled:
  status: 'no map'
  type: text
  value: ''
  add: False
primary_reason_for_amendment:
  status: 'no map'
  type: text
  value: ''
  add: False
secondary_reason_for_amendment:
  status: 'no map'
  type: text
  value: ''
  add: False
description_of_amendment_change:
  status: 'no map'
  type: text
  value: ''
  add: False
rationale_for_amendment_change:
  status: 'no map'
  type: text
  value: ''
  add: False
section_of_amendment_change:
  status: 'no map'
  type: text
  value: ''
  add: False
